{"ast":null,"code":"var _jsxFileName = \"/Users/keny/Desktop/Programming/Bikeable/frontend/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Dashboard from \"./components/Dashboard\";\nimport Stations from \"./components/Stations\";\nimport Footer from \"./components/Footer\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedLocation: \"Union Square Park\",\n      locationCoordinates: {\n        \"Washington Square Park\": {\n          latitude: 40.7308,\n          longitude: 73.9973\n        },\n        \"Union Square Park\": {\n          latitude: 40.7359,\n          longitude: 73.9911\n        },\n        \"Times Square\": {\n          latitude: 40.7580,\n          longitude: 73.9911\n        },\n        \"Bowling Green\": {\n          latitude: 40.7050,\n          longitude: 74.0137\n        },\n        \"The MET\": {\n          latitude: 40.7794,\n          longitude: 73.9632\n        },\n        \"Penn Station\": {\n          latitude: 40.7506,\n          longitude: 73.9935\n        }\n      },\n      numStations: 5,\n      time: \"\",\n      date: \"\",\n      weather: \"\",\n      temperature: \"\",\n      stations: [],\n      initialBikeCount: {},\n      status: {},\n      showInfo: {},\n      dayLog: {},\n      weekLog: {},\n      hasLoaded: false,\n      loadTime: null,\n      updateTime: null,\n      timeSinceUpdate: null,\n      timeSinceLoad: null\n    };\n    this.getStationStatus = this.getStationStatus.bind(this);\n    this.setStationStatus = this.setStationStatus.bind(this);\n    this.getStationDayLog = this.getStationDayLog.bind(this);\n    this.setStationDayLog = this.setStationDayLog.bind(this);\n    this.getStationWeekLog = this.getStationWeekLog.bind(this);\n    this.setStationWeekLog = this.setStationWeekLog.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleShowChange = this.handleShowChange.bind(this);\n    this.loadMoreStations = this.loadMoreStations.bind(this);\n  }\n\n  getStationStatus() {\n    fetch(`stationstatus/${this.state.numStations}/${this.state.locationCoordinates[this.state.selectedLocation].latitude},${this.state.locationCoordinates[this.state.selectedLocation].longitude}`).then(res => res.json()).then(data => this.setStationStatus(data));\n  }\n\n  setStationStatus(data) {\n    let stationList = data.stationStatus.map(station => {\n      return station.id;\n    });\n\n    if (!this.state.loadTime) {\n      this.setState({\n        loadTime: Date.now()\n      });\n    }\n\n    this.setState({\n      updateTime: Date.now(),\n      date: data.date,\n      time: data.time,\n      temperature: data.weatherTemperature,\n      weather: data.weatherDescription\n    });\n\n    for (let stationI = 0; stationI < stationList.length; stationI++) {\n      this.setState(prevState => ({\n        status: { ...prevState.status,\n          [stationList[stationI]]: data.stationStatus[stationI]\n        }\n      }));\n      console.log(data);\n\n      if (!(stationList[stationI] in this.state.initialBikeCount)) {\n        this.setState(prevState => ({\n          showInfo: { ...prevState.showInfo,\n            [stationList[stationI]]: false\n          },\n          initialBikeCount: { ...prevState.initialBikeCount,\n            [stationList[stationI]]: this.state.status[stationList[stationI]].bikes\n          }\n        }));\n      }\n\n      this.getStationDayLog(stationList[stationI]);\n      this.getStationWeekLog(stationList[stationI]);\n      console.log(this.state.status[stationList[stationI]]);\n    }\n\n    this.setState({\n      stations: stationList\n    });\n    this.setState({\n      hasLoaded: true\n    });\n    console.log(\"updated station status\");\n  }\n\n  getStationDayLog(stationID) {\n    fetch(`stationlog/${stationID}`).then(res => res.json()).then(data => this.setStationDayLog(data, stationID)); // console.log(\"updated station \"+stationID+\" logs\")\n  }\n\n  setStationDayLog(data, stationID) {\n    this.setState(prevState => ({\n      dayLog: { ...prevState.dayLog,\n        [stationID]: data.stationLog\n      }\n    }));\n  }\n\n  getStationWeekLog(stationID) {\n    fetch(`stationlogweek/${stationID}`).then(res => res.json()).then(data => this.setStationWeekLog(data, stationID));\n  }\n\n  setStationWeekLog(data, stationID) {\n    this.setState(prevState => ({\n      weekLog: { ...prevState.weekLog,\n        [stationID]: data.stationLog\n      }\n    })); // console.log(this.state.weekLog[stationID])\n  }\n\n  async handleLocationChange(name) {\n    await this.setState({\n      selectedLocation: name,\n      stations: [],\n      initialBikeCount: {},\n      status: {},\n      showInfo: {},\n      dayLog: {},\n      weekLog: {},\n      hasLoaded: false,\n      loadTime: null,\n      updateTime: null,\n      timeSinceUpdate: null,\n      timeSinceLoad: null\n    });\n    this.getStationStatus();\n  }\n\n  handleMapClick(id) {\n    this.setState({\n      mapStation: id\n    });\n  }\n\n  handleShowChange(id) {\n    this.setState(prevState => {\n      const newShow = !prevState.showInfo[id];\n      return {\n        showInfo: { ...prevState.showInfo,\n          [id]: newShow\n        }\n      };\n    });\n  }\n\n  async loadMoreStations() {\n    await this.setState(prevState => ({\n      numStations: prevState.numStations + 5\n    }));\n    this.getStationStatus();\n  }\n\n  componentDidMount() {\n    this.getStationStatus();\n    setInterval(() => this.setState(prevState => ({\n      timeSinceUpdate: Date.now() - prevState.updateTime,\n      timeSinceLoad: Date.now() - prevState.loadTime\n    })), 100);\n    setInterval(() => this.getStationStatus(), 30000);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, Object.assign({}, this.state, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(Dashboard, Object.assign({}, this.state, {\n      handleLocationChange: this.handleLocationChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(Stations, Object.assign({}, this.state, {\n      handleShowChange: this.handleShowChange,\n      loadMoreStations: this.loadMoreStations,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(Footer, Object.assign({}, this.state, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/keny/Desktop/Programming/Bikeable/frontend/src/App.js"],"names":["React","Header","Dashboard","Stations","Footer","App","Component","constructor","state","selectedLocation","locationCoordinates","latitude","longitude","numStations","time","date","weather","temperature","stations","initialBikeCount","status","showInfo","dayLog","weekLog","hasLoaded","loadTime","updateTime","timeSinceUpdate","timeSinceLoad","getStationStatus","bind","setStationStatus","getStationDayLog","setStationDayLog","getStationWeekLog","setStationWeekLog","handleLocationChange","handleShowChange","loadMoreStations","fetch","then","res","json","data","stationList","stationStatus","map","station","id","setState","Date","now","weatherTemperature","weatherDescription","stationI","length","prevState","console","log","bikes","stationID","stationLog","name","handleMapClick","mapStation","newShow","componentDidMount","setInterval","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport Header from \"./components/Header\"\nimport Dashboard from \"./components/Dashboard\"\nimport Stations from \"./components/Stations\"\nimport Footer from \"./components/Footer\"\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n\n      selectedLocation:\"Union Square Park\",\n      locationCoordinates:{\n        \"Washington Square Park\":{latitude :40.7308,longitude:73.9973},\n        \"Union Square Park\":{latitude:40.7359, longitude:73.9911},\n        \"Times Square\":{latitude:40.7580,longitude:73.9911},\n        \"Bowling Green\":{latitude:40.7050, longitude:74.0137},\n        \"The MET\":{latitude:40.7794, longitude:73.9632},\n        \"Penn Station\":{latitude:40.7506,longitude:73.9935}\n      },\n      numStations:5,\n\n      time:\"\",\n      date:\"\",\n      weather:\"\",\n      temperature:\"\",\n\n      stations:[],\n      initialBikeCount:{},\n      status:{},\n      showInfo:{},\n      dayLog :{},\n      weekLog :{},\n      \n      hasLoaded:false,\n\n      loadTime: null,\n      updateTime :null,\n      timeSinceUpdate:null,\n      timeSinceLoad:null\n      \n    }\n    this.getStationStatus = this.getStationStatus.bind(this);\n    this.setStationStatus = this.setStationStatus.bind(this);\n\n    this.getStationDayLog = this.getStationDayLog.bind(this);\n    this.setStationDayLog = this.setStationDayLog.bind(this);\n\n    this.getStationWeekLog = this.getStationWeekLog.bind(this);\n    this.setStationWeekLog = this.setStationWeekLog.bind(this);\n\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleShowChange = this.handleShowChange.bind(this);\n    this.loadMoreStations = this.loadMoreStations.bind(this);\n  }\n\n  getStationStatus(){\n    fetch(`stationstatus/${this.state.numStations}/${this.state.locationCoordinates[this.state.selectedLocation].latitude},${this.state.locationCoordinates[this.state.selectedLocation].longitude}`).then(res=>res.json()).then(data=>(\n      this.setStationStatus(data)\n    ))\n    \n  }\n\n  setStationStatus(data){\n\n    let stationList = data.stationStatus.map(station=>{return station.id})\n    \n    if (!this.state.loadTime){\n      this.setState({ \n        loadTime:Date.now()\n       });\n\n     }\n\n     this.setState({\n      updateTime: Date.now(),\n      date:data.date,\n      time: data.time,\n      temperature:data.weatherTemperature,\n      weather: data.weatherDescription\n      \n    })\n         \n\n     for (let stationI = 0; stationI < stationList.length; stationI++){\n      this.setState(prevState=>({ \n        status:{\n          ...prevState.status,\n          [stationList[stationI]]:data.stationStatus[stationI]\n          \n        }\n       }));\n       console.log(data)\n      \n       if (!(stationList[stationI] in this.state.initialBikeCount)){\n        this.setState(prevState=>({ \n          showInfo:{\n            ...prevState.showInfo,\n            [stationList[stationI]]:false\n          },\n          initialBikeCount:{\n            ...prevState.initialBikeCount,\n            [stationList[stationI]]:this.state.status[stationList[stationI]].bikes\n          },\n\n          }));\n      }\n       this.getStationDayLog(stationList[stationI])\n       this.getStationWeekLog(stationList[stationI])\n       console.log(this.state.status[stationList[stationI]])\n       \n     }\n     this.setState({\n      stations:stationList\n\n    })\n     \n     this.setState({ \n      hasLoaded:true\n     });\n     console.log(\"updated station status\")\n  }\n\n  getStationDayLog(stationID){\n    fetch(`stationlog/${stationID}`).then(res=>res.json()).then(data=>(\n      this.setStationDayLog(data,stationID)\n    ))\n    // console.log(\"updated station \"+stationID+\" logs\")\n  }\n\n  setStationDayLog(data,stationID){\n\n      this.setState(prevState=>({\n        dayLog:{\n          ...prevState.dayLog,\n          [stationID]:data.stationLog\n        }\n      }))\n    \n  }\n\n  getStationWeekLog(stationID){\n    fetch(`stationlogweek/${stationID}`).then(res=>res.json()).then(data=>(\n      this.setStationWeekLog(data,stationID)\n    ))\n  }\n\n  setStationWeekLog(data,stationID){\n\n      this.setState(prevState=>({\n        weekLog:{\n          ...prevState.weekLog,\n          [stationID]:data.stationLog\n        }\n      }))\n      // console.log(this.state.weekLog[stationID])\n    \n  }\n\n  async handleLocationChange(name){\n    await this.setState( {\n      selectedLocation: name,\n\n      stations:[],\n      initialBikeCount:{},\n      status:{},\n      showInfo:{},\n      dayLog :{},\n      weekLog :{},\n      \n      hasLoaded:false,\n\n      loadTime: null,\n      updateTime :null,\n      timeSinceUpdate:null,\n      timeSinceLoad:null\n    })\n    this.getStationStatus()\n  }\n\n  handleMapClick(id){\n    this.setState( {\n      mapStation:id\n    })\n  }\n\n  handleShowChange(id){\n    this.setState( prevState =>{\n      const newShow = !prevState.showInfo[id]\n      return { \n      showInfo:{\n        ...prevState.showInfo,\n        [id]:newShow\n      }\n     }})\n  }\n\n  async loadMoreStations(){\n    await this.setState(prevState=>({\n      numStations: prevState.numStations+5\n    }))\n    this.getStationStatus()\n  }\n\n  componentDidMount() {\n    this.getStationStatus()\n    setInterval(() => this.setState(prevState=>({ timeSinceUpdate: Date.now()-prevState.updateTime,timeSinceLoad:Date.now()-prevState.loadTime})), 100)\n    setInterval(() => this.getStationStatus(), 30000)\n      \n  }\n\n  render(){\n    return (\n      <div>\n        <Header {...this.state}/>\n        <Dashboard{...this.state} handleLocationChange = {this.handleLocationChange}/>\n        <Stations{...this.state} handleShowChange = {this.handleShowChange} loadMoreStations = {this.loadMoreStations}/>\n        <Footer {...this.state}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}