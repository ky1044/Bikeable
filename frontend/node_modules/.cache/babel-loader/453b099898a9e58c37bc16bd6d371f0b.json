{"ast":null,"code":"var _jsxFileName = \"/Users/keny/Desktop/Programming/Bikeable/frontend/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Dashboard from \"./components/Dashboard\";\nimport Stations from \"./components/Stations\";\nimport Footer from \"./components/Footer\";\nimport { scroller } from \"react-scroll\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedLocation: \"Union Square Park\",\n      locationCoordinates: {\n        \"Washington Square Park\": {\n          latitude: 40.7308,\n          longitude: 73.9973\n        },\n        \"Union Square Park\": {\n          latitude: 40.7359,\n          longitude: 73.9911\n        },\n        \"Times Square\": {\n          latitude: 40.7580,\n          longitude: 73.9911\n        },\n        \"Bowling Green\": {\n          latitude: 40.7050,\n          longitude: 74.0137\n        },\n        \"The MET\": {\n          latitude: 40.7794,\n          longitude: 73.9632\n        },\n        \"Penn Station\": {\n          latitude: 40.7506,\n          longitude: 73.9935\n        }\n      },\n      numStations: 5,\n      time: \"\",\n      date: \"\",\n      weather: \"\",\n      temperature: \"\",\n      stations: [],\n      initialBikeCount: {},\n      status: {},\n      showInfo: {},\n      dayLog: {},\n      weekLog: {},\n      hasLoaded: false,\n      showMap: false,\n      mapStation: null,\n      loadTime: null,\n      updateTime: null,\n      mapClickTime: null,\n      timeSinceUpdate: null,\n      timeSinceLoad: null,\n      timeSinceMapClick: null,\n      windowHeight: 0,\n      windowWidth: 0\n    };\n    this.getStationStatus = this.getStationStatus.bind(this);\n    this.setStationStatus = this.setStationStatus.bind(this);\n    this.getStationDayLog = this.getStationDayLog.bind(this);\n    this.setStationDayLog = this.setStationDayLog.bind(this);\n    this.getStationWeekLog = this.getStationWeekLog.bind(this);\n    this.setStationWeekLog = this.setStationWeekLog.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleMapToggle = this.handleMapToggle.bind(this);\n    this.handleMapClick = this.handleMapClick.bind(this);\n    this.handleShowChange = this.handleShowChange.bind(this);\n    this.loadMoreStations = this.loadMoreStations.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  getStationStatus() {\n    fetch(`stationstatus/${this.state.numStations}/${this.state.locationCoordinates[this.state.selectedLocation].latitude},${this.state.locationCoordinates[this.state.selectedLocation].longitude}`).then(res => res.json()).then(data => this.setStationStatus(data));\n  }\n\n  setStationStatus(data) {\n    let stationList = data.stationStatus.map(station => {\n      return station.id;\n    });\n\n    if (!this.state.loadTime) {\n      this.setState({\n        loadTime: Date.now()\n      });\n    }\n\n    this.setState({\n      updateTime: Date.now(),\n      date: data.date,\n      time: data.time,\n      temperature: data.weatherTemperature,\n      weather: data.weatherDescription\n    });\n\n    for (let stationI = 0; stationI < stationList.length; stationI++) {\n      this.setState(prevState => ({\n        status: { ...prevState.status,\n          [stationList[stationI]]: data.stationStatus[stationI]\n        }\n      }));\n\n      if (!(stationList[stationI] in this.state.initialBikeCount)) {\n        this.setState(prevState => ({\n          showInfo: { ...prevState.showInfo,\n            [stationList[stationI]]: false\n          },\n          initialBikeCount: { ...prevState.initialBikeCount,\n            [stationList[stationI]]: this.state.status[stationList[stationI]].bikes\n          }\n        }));\n      }\n\n      this.getStationDayLog(stationList[stationI]);\n      this.getStationWeekLog(stationList[stationI]);\n    }\n\n    this.setState({\n      stations: stationList\n    });\n    this.setState({\n      hasLoaded: true\n    });\n    console.log(\"updated station status\");\n  }\n\n  getStationDayLog(stationID) {\n    fetch(`stationlog/${stationID}`).then(res => res.json()).then(data => this.setStationDayLog(data, stationID)); // console.log(\"updated station \"+stationID+\" logs\")\n  }\n\n  setStationDayLog(data, stationID) {\n    this.setState(prevState => ({\n      dayLog: { ...prevState.dayLog,\n        [stationID]: data.stationLog\n      }\n    }));\n  }\n\n  getStationWeekLog(stationID) {\n    fetch(`stationlogweek/${stationID}`).then(res => res.json()).then(data => this.setStationWeekLog(data, stationID));\n  }\n\n  setStationWeekLog(data, stationID) {\n    this.setState(prevState => ({\n      weekLog: { ...prevState.weekLog,\n        [stationID]: data.stationLog\n      }\n    })); // console.log(this.state.weekLog[stationID])\n  }\n\n  async handleLocationChange(name) {\n    await this.setState({\n      selectedLocation: name,\n      stations: [],\n      initialBikeCount: {},\n      status: {},\n      showInfo: {},\n      dayLog: {},\n      weekLog: {},\n      hasLoaded: false,\n      showMap: false,\n      mapStation: null,\n      loadTime: null,\n      updateTime: null,\n      timeSinceUpdate: null,\n      timeSinceLoad: null\n    });\n    this.getStationStatus();\n  }\n\n  handleMapToggle() {\n    this.setState(prevState => ({\n      showMap: !prevState.showMap\n    }));\n  }\n\n  handleMapClick(event, id) {\n    this.setState(prevState => {\n      return {\n        mapStation: id,\n        mapClickTime: Date.now(),\n        showInfo: { ...prevState.showInfo,\n          [id]: true\n        }\n      };\n    });\n    scroller.scrollTo(\"station_\" + id, {\n      duration: 500,\n      smooth: true,\n      offset: -20\n    }); // console.log(this.state.mapStation)\n  }\n\n  handleShowChange(id) {\n    this.setState(prevState => {\n      const newShow = !prevState.showInfo[id];\n      return {\n        showInfo: { ...prevState.showInfo,\n          [id]: newShow\n        }\n      };\n    });\n  }\n\n  async loadMoreStations() {\n    await this.setState(prevState => ({\n      numStations: prevState.numStations + 5\n    }));\n    this.getStationStatus();\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      windowWidth: window.innerWidth,\n      windowHeight: window.innerHeight\n    });\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n    this.getStationStatus();\n    setInterval(() => this.setState(prevState => ({\n      timeSinceUpdate: Date.now() - prevState.updateTime,\n      timeSinceLoad: Date.now() - prevState.loadTime\n    })), 100);\n    setInterval(() => this.setState(prevState => ({\n      timeSinceMapClick: Date.now() - prevState.mapClickTime\n    })), 10);\n    setInterval(() => this.getStationStatus(), 30000);\n  }\n\n  render() {\n    if (this.state.windowWidth > 500) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Header, Object.assign({}, this.state, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(Dashboard, Object.assign({}, this.state, {\n        handleLocationChange: this.handleLocationChange,\n        handleMapClick: this.handleMapClick,\n        handleMapToggle: this.handleMapToggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(Stations, Object.assign({}, this.state, {\n        handleShowChange: this.handleShowChange,\n        loadMoreStations: this.loadMoreStations,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mobile-column\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: \"100%\",\n          height: 100,\n          backgroundColor: \"grey\",\n          padding: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"hr\", {\n        className: \"walk-container\",\n        style: {\n          position: \"absolute\",\n          left: 0,\n          width: this.state.windowWidth - 20\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"hr\", {\n        style: {\n          borderColor: \"#222222\",\n          borderStyle: \"dashed\",\n          margin: \"auto\",\n          marginTop: -10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Footer, Object.assign({}, this.state, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 9\n        }\n      })));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Header, Object.assign({}, this.state, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(Dashboard, Object.assign({}, this.state, {\n        handleLocationChange: this.handleLocationChange,\n        handleMapClick: this.handleMapClick,\n        handleMapToggle: this.handleMapToggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(Stations, Object.assign({}, this.state, {\n        handleShowChange: this.handleShowChange,\n        loadMoreStations: this.loadMoreStations,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(Footer, Object.assign({}, this.state, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 9\n        }\n      })));\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/keny/Desktop/Programming/Bikeable/frontend/src/App.js"],"names":["React","Header","Dashboard","Stations","Footer","scroller","App","Component","constructor","state","selectedLocation","locationCoordinates","latitude","longitude","numStations","time","date","weather","temperature","stations","initialBikeCount","status","showInfo","dayLog","weekLog","hasLoaded","showMap","mapStation","loadTime","updateTime","mapClickTime","timeSinceUpdate","timeSinceLoad","timeSinceMapClick","windowHeight","windowWidth","getStationStatus","bind","setStationStatus","getStationDayLog","setStationDayLog","getStationWeekLog","setStationWeekLog","handleLocationChange","handleMapToggle","handleMapClick","handleShowChange","loadMoreStations","updateWindowDimensions","fetch","then","res","json","data","stationList","stationStatus","map","station","id","setState","Date","now","weatherTemperature","weatherDescription","stationI","length","prevState","bikes","console","log","stationID","stationLog","name","event","scrollTo","duration","smooth","offset","newShow","window","innerWidth","innerHeight","componentDidMount","addEventListener","setInterval","render","width","height","backgroundColor","padding","position","left","borderColor","borderStyle","margin","marginTop"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport Header from \"./components/Header\"\nimport Dashboard from \"./components/Dashboard\"\nimport Stations from \"./components/Stations\"\nimport Footer from \"./components/Footer\"\nimport {scroller} from \"react-scroll\"\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n\n      selectedLocation:\"Union Square Park\",\n      locationCoordinates:{\n        \"Washington Square Park\":{latitude :40.7308,longitude:73.9973},\n        \"Union Square Park\":{latitude:40.7359, longitude:73.9911},\n        \"Times Square\":{latitude:40.7580,longitude:73.9911},\n        \"Bowling Green\":{latitude:40.7050, longitude:74.0137},\n        \"The MET\":{latitude:40.7794, longitude:73.9632},\n        \"Penn Station\":{latitude:40.7506,longitude:73.9935}\n      },\n      numStations:5,\n\n      time:\"\",\n      date:\"\",\n      weather:\"\",\n      temperature:\"\",\n\n      stations:[],\n      initialBikeCount:{},\n      status:{},\n      showInfo:{},\n      dayLog :{},\n      weekLog :{},\n      \n      hasLoaded:false,\n\n      showMap:false,\n      mapStation:null,\n      \n      loadTime: null,\n      updateTime :null,\n      mapClickTime:null,\n      timeSinceUpdate:null,\n      timeSinceLoad:null,\n      timeSinceMapClick:null,\n\n      windowHeight:0,\n      windowWidth:0\n\n      \n    }\n    this.getStationStatus = this.getStationStatus.bind(this);\n    this.setStationStatus = this.setStationStatus.bind(this);\n\n    this.getStationDayLog = this.getStationDayLog.bind(this);\n    this.setStationDayLog = this.setStationDayLog.bind(this);\n\n    this.getStationWeekLog = this.getStationWeekLog.bind(this);\n    this.setStationWeekLog = this.setStationWeekLog.bind(this);\n\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleMapToggle = this.handleMapToggle.bind(this);\n    this.handleMapClick = this.handleMapClick.bind(this);\n    this.handleShowChange = this.handleShowChange.bind(this);\n    this.loadMoreStations = this.loadMoreStations.bind(this);\n\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  getStationStatus(){\n    fetch(`stationstatus/${this.state.numStations}/${this.state.locationCoordinates[this.state.selectedLocation].latitude},${this.state.locationCoordinates[this.state.selectedLocation].longitude}`).then(res=>res.json()).then(data=>(\n      this.setStationStatus(data)\n    ))\n    \n  }\n\n  setStationStatus(data){\n\n    let stationList = data.stationStatus.map(station=>{return station.id})\n    \n    if (!this.state.loadTime){\n      this.setState({ \n        loadTime:Date.now()\n       });\n\n     }\n\n     this.setState({\n      updateTime: Date.now(),\n      date:data.date,\n      time: data.time,\n      temperature:data.weatherTemperature,\n      weather: data.weatherDescription\n      \n    })\n         \n\n     for (let stationI = 0; stationI < stationList.length; stationI++){\n      this.setState(prevState=>({ \n        status:{\n          ...prevState.status,\n          [stationList[stationI]]:data.stationStatus[stationI]\n          \n        }\n       }));\n      \n       if (!(stationList[stationI] in this.state.initialBikeCount)){\n        this.setState(prevState=>({ \n          showInfo:{\n            ...prevState.showInfo,\n            [stationList[stationI]]:false\n          },\n          initialBikeCount:{\n            ...prevState.initialBikeCount,\n            [stationList[stationI]]:this.state.status[stationList[stationI]].bikes\n          },\n\n          }));\n      }\n       this.getStationDayLog(stationList[stationI])\n       this.getStationWeekLog(stationList[stationI])       \n     }\n     this.setState({\n      stations:stationList\n\n    })\n     \n     this.setState({ \n      hasLoaded:true\n     });\n     console.log(\"updated station status\")\n  }\n\n  getStationDayLog(stationID){\n    fetch(`stationlog/${stationID}`).then(res=>res.json()).then(data=>(\n      this.setStationDayLog(data,stationID)\n    ))\n    // console.log(\"updated station \"+stationID+\" logs\")\n  }\n\n  setStationDayLog(data,stationID){\n\n      this.setState(prevState=>({\n        dayLog:{\n          ...prevState.dayLog,\n          [stationID]:data.stationLog\n        }\n      }))\n    \n  }\n\n  getStationWeekLog(stationID){\n    fetch(`stationlogweek/${stationID}`).then(res=>res.json()).then(data=>(\n      this.setStationWeekLog(data,stationID)\n    ))\n  }\n\n  setStationWeekLog(data,stationID){\n\n      this.setState(prevState=>({\n        weekLog:{\n          ...prevState.weekLog,\n          [stationID]:data.stationLog\n        }\n      }))\n      // console.log(this.state.weekLog[stationID])\n    \n  }\n\n  async handleLocationChange(name){\n    await this.setState( {\n      selectedLocation: name,\n\n      stations:[],\n      initialBikeCount:{},\n      status:{},\n      showInfo:{},\n      dayLog :{},\n      weekLog :{},\n      \n      hasLoaded:false,\n\n      showMap:false,\n      mapStation:null,\n      \n      loadTime: null,\n      updateTime :null,\n      timeSinceUpdate:null,\n      timeSinceLoad:null\n    })\n    this.getStationStatus()\n  }\n\n  handleMapToggle(){\n    this.setState( prevState =>(\n      {showMap:!prevState.showMap}\n     ))\n  }\n\n  handleMapClick(event,id){\n    this.setState( prevState=>{\n      return {\n        mapStation:id,\n        mapClickTime:Date.now(),\n        showInfo:{\n          ...prevState.showInfo,\n          [id]:true\n        }\n      \n    }\n      \n\n    })\n    scroller.scrollTo(\"station_\"+id,{duration: 500,smooth: true,offset:-20})\n    // console.log(this.state.mapStation)\n  }\n\n  handleShowChange(id){\n    this.setState( prevState =>{\n      const newShow = !prevState.showInfo[id]\n      return { \n      showInfo:{\n        ...prevState.showInfo,\n        [id]:newShow\n      }\n     }})\n  }\n\n  async loadMoreStations(){\n    await this.setState(prevState=>({\n      numStations: prevState.numStations+5\n    }))\n    this.getStationStatus()\n  }\n\n  updateWindowDimensions() {\n    this.setState({ windowWidth: window.innerWidth, windowHeight: window.innerHeight });\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n    this.getStationStatus()\n    setInterval(() => this.setState(prevState=>({ timeSinceUpdate: Date.now()-prevState.updateTime,timeSinceLoad:Date.now()-prevState.loadTime})), 100)\n    setInterval(() => this.setState(prevState=>({timeSinceMapClick:Date.now()-prevState.mapClickTime})), 10)\n    setInterval(() => this.getStationStatus(), 30000)\n    \n      \n  }\n\n  render(){\n    if (this.state.windowWidth>500){return (\n      <div>\n        <Header {...this.state}/>\n        <Dashboard{...this.state} handleLocationChange = {this.handleLocationChange} handleMapClick = {this.handleMapClick} handleMapToggle = {this.handleMapToggle}/>\n        <Stations{...this.state} handleShowChange = {this.handleShowChange} loadMoreStations = {this.loadMoreStations}/>\n        <div className = \"mobile-column\">\n          <div style = {{width:\"100%\",height:100,backgroundColor:\"grey\",padding:0}}></div>\n          \n          <hr className = \"walk-container\" style = {{position:\"absolute\",left:0,width:this.state.windowWidth-20}}></hr>\n          <hr style ={{borderColor:\"#222222\",borderStyle: \"dashed\",margin:\"auto\",marginTop:-10}}/></div>\n        <Footer {...this.state}/>\n        \n      </div>\n    );}\n    else{return(\n      <div>\n        <Header {...this.state}/>\n        <Dashboard{...this.state} handleLocationChange = {this.handleLocationChange} handleMapClick = {this.handleMapClick} handleMapToggle = {this.handleMapToggle}/>\n        <Stations{...this.state} handleShowChange = {this.handleShowChange} loadMoreStations = {this.loadMoreStations}/>\n        <Footer {...this.state}/>\n      </div>\n    )\n      \n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}