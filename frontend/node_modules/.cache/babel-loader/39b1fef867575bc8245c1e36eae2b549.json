{"ast":null,"code":"var _jsxFileName = \"/Users/keny/Desktop/Programming/Bikeable/frontend/src/components/SearchLocations.js\";\nimport React from \"react\";\nimport Autosuggest from 'react-autosuggest'; // Imagine you have a list of languages that you'd like to autosuggest.\n\nconst languages = [{\n  name: 'C',\n  year: 1972\n}, {\n  name: 'Elm',\n  year: 2012\n}];\n\nclass SearchLocations extends React.Component {\n  constructor() {\n    super(); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    // Teach Autosuggest how to calculate suggestions for any given input value.\n    const getSuggestions = value => {\n      const inputValue = value.trim().toLowerCase();\n      const inputLength = inputValue.length;\n      return inputLength === 0 ? [] : languages.filter(lang => lang.name.toLowerCase().slice(0, inputLength) === inputValue);\n    }; // When suggestion is clicked, Autosuggest needs to populate the input\n    // based on the clicked suggestion. Teach Autosuggest how to calculate the\n    // input value for every given suggestion.\n\n\n    const getSuggestionValue = suggestion => suggestion.name; // Use your imagination to render suggestions.\n\n\n    const renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, suggestion.name);\n\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'Type a programming language',\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport default SearchLocations;","map":{"version":3,"sources":["/Users/keny/Desktop/Programming/Bikeable/frontend/src/components/SearchLocations.js"],"names":["React","Autosuggest","languages","name","year","SearchLocations","Component","constructor","onChange","event","newValue","setState","value","onSuggestionsFetchRequested","suggestions","getSuggestions","onSuggestionsClearRequested","state","render","inputValue","trim","toLowerCase","inputLength","length","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","inputProps","placeholder"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB,C,CAEA;;AACA,MAAMC,SAAS,GAAG,CACd;AACEC,EAAAA,IAAI,EAAE,GADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CADc,EAKd;AACED,EAAAA,IAAI,EAAE,KADR;AAEEC,EAAAA,IAAI,EAAE;AAFR,CALc,CAAlB;;AAaA,MAAMC,eAAN,SAA8BL,KAAK,CAACM,SAApC,CAA6C;AACzCC,EAAAA,WAAW,GAAG;AACZ,YADY,CAGZ;AACA;AACA;AACA;AACA;;AAPY,SAcdC,QAdc,GAcH,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAyB;AAClC,WAAKC,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAEF;AADK,OAAd;AAGD,KAlBa;;AAAA,SAsBdG,2BAtBc,GAsBgB,CAAC;AAAED,MAAAA;AAAF,KAAD,KAAe;AAC3C,WAAKD,QAAL,CAAc;AACZG,QAAAA,WAAW,EAAEC,cAAc,CAACH,KAAD;AADf,OAAd;AAGD,KA1Ba;;AAAA,SA6BdI,2BA7Bc,GA6BgB,MAAM;AAClC,WAAKL,QAAL,CAAc;AACZG,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KAjCa;;AAQZ,SAAKG,KAAL,GAAa;AACXL,MAAAA,KAAK,EAAE,EADI;AAEXE,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AAuBDI,EAAAA,MAAM,GAAG;AAEJ;AACD,UAAMH,cAAc,GAAGH,KAAK,IAAI;AAC5B,YAAMO,UAAU,GAAGP,KAAK,CAACQ,IAAN,GAAaC,WAAb,EAAnB;AACA,YAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AAEA,aAAOD,WAAW,KAAK,CAAhB,GAAoB,EAApB,GAAyBpB,SAAS,CAACsB,MAAV,CAAiBC,IAAI,IACrDA,IAAI,CAACtB,IAAL,CAAUkB,WAAV,GAAwBK,KAAxB,CAA8B,CAA9B,EAAiCJ,WAAjC,MAAkDH,UADlB,CAAhC;AAGH,KAPD,CAHK,CAYL;AACA;AACA;;;AACA,UAAMQ,kBAAkB,GAAGC,UAAU,IAAIA,UAAU,CAACzB,IAApD,CAfK,CAiBL;;;AACA,UAAM0B,gBAAgB,GAAGD,UAAU,iBAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACCA,UAAU,CAACzB,IADZ,CADJ;;AAKF,UAAM;AAAES,MAAAA,KAAF;AAASE,MAAAA;AAAT,QAAyB,KAAKG,KAApC,CAvBO,CAyBP;;AACA,UAAMa,UAAU,GAAG;AACjBC,MAAAA,WAAW,EAAE,6BADI;AAEjBnB,MAAAA,KAFiB;AAGjBJ,MAAAA,QAAQ,EAAE,KAAKA;AAHE,KAAnB,CA1BO,CAgCP;;AACA,wBACE,oBAAC,WAAD;AACE,MAAA,WAAW,EAAEM,WADf;AAEE,MAAA,2BAA2B,EAAE,KAAKD,2BAFpC;AAGE,MAAA,2BAA2B,EAAE,KAAKG,2BAHpC;AAIE,MAAA,kBAAkB,EAAEW,kBAJtB;AAKE,MAAA,gBAAgB,EAAEE,gBALpB;AAME,MAAA,UAAU,EAAEC,UANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AA/EwC;;AAiF7C,eAAezB,eAAf","sourcesContent":["import React from \"react\"\nimport Autosuggest from 'react-autosuggest';\n\n// Imagine you have a list of languages that you'd like to autosuggest.\nconst languages = [\n    {\n      name: 'C',\n      year: 1972\n    },\n    {\n      name: 'Elm',\n      year: 2012\n    }\n  ]\n  \n \n\nclass SearchLocations extends React.Component{\n    constructor() {\n      super();\n  \n      // Autosuggest is a controlled component.\n      // This means that you need to provide an input value\n      // and an onChange handler that updates this value (see below).\n      // Suggestions also need to be provided to the Autosuggest,\n      // and they are initially empty because the Autosuggest is closed.\n      this.state = {\n        value: '',\n        suggestions: []\n      };\n    }\n  \n    onChange = (event, { newValue }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n  \n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({ value }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n  \n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n  \n    render() {\n\n         // Teach Autosuggest how to calculate suggestions for any given input value.\n        const getSuggestions = value => {\n            const inputValue = value.trim().toLowerCase();\n            const inputLength = inputValue.length;\n        \n            return inputLength === 0 ? [] : languages.filter(lang =>\n            lang.name.toLowerCase().slice(0, inputLength) === inputValue\n            );\n        };\n        \n        // When suggestion is clicked, Autosuggest needs to populate the input\n        // based on the clicked suggestion. Teach Autosuggest how to calculate the\n        // input value for every given suggestion.\n        const getSuggestionValue = suggestion => suggestion.name;\n        \n        // Use your imagination to render suggestions.\n        const renderSuggestion = suggestion => (\n            <div>\n            {suggestion.name}\n            </div>\n        );\n      const { value, suggestions } = this.state;\n  \n      // Autosuggest will pass through all these props to the input.\n      const inputProps = {\n        placeholder: 'Type a programming language',\n        value,\n        onChange: this.onChange\n      };\n  \n      // Finally, render it!\n      return (\n        <Autosuggest\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps}\n        />\n      );\n    }\n  }\nexport default SearchLocations"]},"metadata":{},"sourceType":"module"}