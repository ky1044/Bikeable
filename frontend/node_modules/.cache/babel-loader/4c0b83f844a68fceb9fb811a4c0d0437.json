{"ast":null,"code":"var _jsxFileName = \"/Users/keny/Desktop/Programming/Bikeable/frontend/src/components/SearchLocations.js\";\nimport React from \"react\";\nimport Autosuggest from 'react-autosuggest';\nimport './Search.css'; // Imagine you have a list of languages that you'd like to autosuggest.\n// Teach Autosuggest how to calculate suggestions for any given input value.\n\nconst getSuggestions = (value, locations) => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  console.log(inputValue);\n  return locations.filter(loc => loc.toLowerCase().slice(0, inputLength) === inputValue);\n}; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\n\nconst getSuggestionValue = suggestion => {\n  return suggestion;\n}; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }\n}, suggestion);\n\nclass SearchLocations extends React.Component {\n  constructor() {\n    super(); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    this.getSuggestionValue = suggestion => {\n      this.props.handleLocationChange(suggestion);\n      return suggestion;\n    };\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value, Object.keys(this.props.locationCoordinates).map((key, index) => key))\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'Search Locations',\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: this.getSuggestionValue,\n      shouldRenderSuggestions: true,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport default SearchLocations;","map":{"version":3,"sources":["/Users/keny/Desktop/Programming/Bikeable/frontend/src/components/SearchLocations.js"],"names":["React","Autosuggest","getSuggestions","value","locations","inputValue","trim","toLowerCase","inputLength","length","console","log","filter","loc","slice","getSuggestionValue","suggestion","renderSuggestion","SearchLocations","Component","constructor","props","handleLocationChange","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","Object","keys","locationCoordinates","map","key","index","onSuggestionsClearRequested","state","render","inputProps","placeholder"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAO,cAAP,C,CAEA;AAGE;;AACA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAOC,SAAP,KAAqB;AAC1C,QAAMC,UAAU,GAAGF,KAAK,CAACG,IAAN,GAAaC,WAAb,EAAnB;AACA,QAAMC,WAAW,GAAGH,UAAU,CAACI,MAA/B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,UAAZ;AAEA,SAAOD,SAAS,CAACQ,MAAV,CAAiBC,GAAG,IACzBA,GAAG,CAACN,WAAJ,GAAkBO,KAAlB,CAAwB,CAAxB,EAA2BN,WAA3B,MAA4CH,UADvC,CAAP;AAGD,CARD,C,CAUA;AACA;AACA;;;AACA,MAAMU,kBAAkB,GAAGC,UAAU,IAAI;AAEvC,SAAOA,UAAP;AAAmB,CAFrB,C,CAIA;;;AACA,MAAMC,gBAAgB,GAAGD,UAAU,iBACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACIA,UADJ,CADF;;AAMF,MAAME,eAAN,SAA8BlB,KAAK,CAACmB,SAApC,CAA6C;AACzCC,EAAAA,WAAW,GAAG;AACZ,YADY,CAGZ;AACA;AACA;AACA;AACA;;AAPY,SAadL,kBAbc,GAaOC,UAAU,IAAI;AAC/B,WAAKK,KAAL,CAAWC,oBAAX,CAAgCN,UAAhC;AACA,aAAOA,UAAP;AAAkB,KAfR;;AAAA,SAmBdO,QAnBc,GAmBH,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAyB;AAClC,WAAKC,QAAL,CAAc;AACZvB,QAAAA,KAAK,EAAEsB;AADK,OAAd;AAGD,KAvBa;;AAAA,SA2BdE,2BA3Bc,GA2BgB,CAAC;AAAExB,MAAAA;AAAF,KAAD,KAAe;AAC3C,WAAKuB,QAAL,CAAc;AACZE,QAAAA,WAAW,EAAE1B,cAAc,CAACC,KAAD,EAAO0B,MAAM,CAACC,IAAP,CAAY,KAAKT,KAAL,CAAWU,mBAAvB,EAA4CC,GAA5C,CAAgD,CAACC,GAAD,EAAKC,KAAL,KAC9ED,GAD8B,CAAP;AADf,OAAd;AAKD,KAjCa;;AAAA,SAoCdE,2BApCc,GAoCgB,MAAM;AAClC,WAAKT,QAAL,CAAc;AACZE,QAAAA,WAAW,EAAE;AADD,OAAd;AAGD,KAxCa;;AAQZ,SAAKQ,KAAL,GAAa;AACXjC,MAAAA,KAAK,EAAE,EADI;AAEXyB,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AA8BDS,EAAAA,MAAM,GAAG;AACP,UAAM;AAAElC,MAAAA,KAAF;AAASyB,MAAAA;AAAT,QAAyB,KAAKQ,KAApC,CADO,CAGP;;AACA,UAAME,UAAU,GAAG;AACjBC,MAAAA,WAAW,EAAE,kBADI;AAEjBpC,MAAAA,KAFiB;AAGjBoB,MAAAA,QAAQ,EAAE,KAAKA;AAHE,KAAnB,CAJO,CAUP;;AACA,wBACE,oBAAC,WAAD;AACE,MAAA,WAAW,EAAEK,WADf;AAEE,MAAA,2BAA2B,EAAE,KAAKD,2BAFpC;AAGE,MAAA,2BAA2B,EAAE,KAAKQ,2BAHpC;AAIE,MAAA,kBAAkB,EAAE,KAAKpB,kBAJ3B;AAKE,MAAA,uBAAuB,EAAE,IAL3B;AAME,MAAA,gBAAgB,EAAEE,gBANpB;AAOE,MAAA,UAAU,EAAEqB,UAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAWD;;AAjEwC;;AAmE7C,eAAepB,eAAf","sourcesContent":["import React from \"react\"\nimport Autosuggest from 'react-autosuggest';\nimport './Search.css';\n\n// Imagine you have a list of languages that you'd like to autosuggest.\n\n  \n  // Teach Autosuggest how to calculate suggestions for any given input value.\n  const getSuggestions = (value,locations) => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n    console.log(inputValue)\n  \n    return locations.filter(loc =>\n      loc.toLowerCase().slice(0, inputLength) === inputValue\n    );\n  };\n  \n  // When suggestion is clicked, Autosuggest needs to populate the input\n  // based on the clicked suggestion. Teach Autosuggest how to calculate the\n  // input value for every given suggestion.\n  const getSuggestionValue = suggestion => {\n    \n    return suggestion;}\n  \n  // Use your imagination to render suggestions.\n  const renderSuggestion = suggestion => (\n    <div >\n       {suggestion}\n    </div>\n  );\n\nclass SearchLocations extends React.Component{\n    constructor() {\n      super();\n  \n      // Autosuggest is a controlled component.\n      // This means that you need to provide an input value\n      // and an onChange handler that updates this value (see below).\n      // Suggestions also need to be provided to the Autosuggest,\n      // and they are initially empty because the Autosuggest is closed.\n      this.state = {\n        value: '',\n        suggestions: []\n      };\n    }\n    getSuggestionValue = suggestion => {\n        this.props.handleLocationChange(suggestion);\n        return suggestion}\n\n\n  \n    onChange = (event, { newValue }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n  \n    // Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it.\n    onSuggestionsFetchRequested = ({ value }) => {\n      this.setState({\n        suggestions: getSuggestions(value,Object.keys(this.props.locationCoordinates).map((key,index)=>(\n            key\n            )))\n      });\n    };\n  \n    // Autosuggest will call this function every time you need to clear suggestions.\n    onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n  \n    render() {\n      const { value, suggestions } = this.state;\n  \n      // Autosuggest will pass through all these props to the input.\n      const inputProps = {\n        placeholder: 'Search Locations',\n        value,\n        onChange: this.onChange\n      };\n  \n      // Finally, render it!\n      return (\n        <Autosuggest\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={this.getSuggestionValue}\n          shouldRenderSuggestions={true}\n          renderSuggestion={renderSuggestion}\n          inputProps={inputProps}\n        />\n      );\n    }\n  }\nexport default SearchLocations"]},"metadata":{},"sourceType":"module"}