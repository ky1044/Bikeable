{"ast":null,"code":"var _jsxFileName = \"/Users/keny/Desktop/Programming/Bikeable/frontend/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Dashboard from \"./components/Dashboard\";\nimport Stations from \"./components/Stations\";\nimport Footer from \"./components/Footer\";\nimport Desktop from \"./components/Desktop\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      selectedLocation: \"Union Square Park\",\n      selectedLocationLatitude: 40.7359,\n      selectedLocationLongitude: 73.9911,\n      locationCoordinates: {\n        \"Washington Square Park\": {\n          latitude: 40.7308,\n          longitude: 73.9973\n        },\n        \"Union Square Park\": {\n          latitude: 40.7359,\n          longitude: 73.9911\n        },\n        \"Times Square\": {\n          latitude: 40.7580,\n          longitude: 73.9911\n        },\n        \"Bowling Green\": {\n          latitude: 40.7050,\n          longitude: 74.0137\n        },\n        \"The MET\": {\n          latitude: 40.7794,\n          longitude: 73.9632\n        },\n        \"Penn Station\": {\n          latitude: 40.7506,\n          longitude: 73.9935\n        }\n      },\n      numStations: 10,\n      time: \"\",\n      date: \"\",\n      weather: \"\",\n      temperature: \"\",\n      stations: [],\n      initialBikeCount: {},\n      status: {},\n      showInfo: {},\n      dayLog: {},\n      weekLog: {},\n      hasLoaded: false,\n      showMap: false,\n      mapStation: null,\n      loadTime: null,\n      updateTime: null,\n      mapClickTime: null,\n      timeSinceUpdate: null,\n      timeSinceLoad: null,\n      timeSinceMapClick: null,\n      windowHeight: 0,\n      windowWidth: 0,\n      view: null\n    };\n    this.getStationStatus = this.getStationStatus.bind(this);\n    this.setStationStatus = this.setStationStatus.bind(this);\n    this.getStationDayLog = this.getStationDayLog.bind(this);\n    this.setStationDayLog = this.setStationDayLog.bind(this);\n    this.getStationWeekLog = this.getStationWeekLog.bind(this);\n    this.setStationWeekLog = this.setStationWeekLog.bind(this);\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleMapToggle = this.handleMapToggle.bind(this);\n    this.handleMapClick = this.handleMapClick.bind(this);\n    this.handleShowChange = this.handleShowChange.bind(this);\n    this.loadMoreStations = this.loadMoreStations.bind(this);\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  getStationStatus() {\n    fetch(`stationstatus/${this.state.numStations}/${this.state.selectedLocationLatitude},${this.state.selectedLocationLongitude}`).then(res => res.json()).then(data => this.setStationStatus(data));\n  }\n\n  setStationStatus(data) {\n    let stationList = data.stationStatus.map(station => {\n      return station.id;\n    });\n\n    if (!this.state.loadTime) {\n      this.setState({\n        loadTime: Date.now()\n      });\n    }\n\n    this.setState({\n      updateTime: Date.now(),\n      date: data.date,\n      time: data.time,\n      temperature: data.weatherTemperature,\n      weather: data.weatherDescription\n    });\n\n    for (let stationI = 0; stationI < stationList.length; stationI++) {\n      this.setState(prevState => ({\n        status: { ...prevState.status,\n          [stationList[stationI]]: data.stationStatus[stationI]\n        }\n      }));\n\n      if (!(stationList[stationI] in this.state.initialBikeCount)) {\n        this.setState(prevState => ({\n          showInfo: { ...prevState.showInfo,\n            [stationList[stationI]]: false\n          },\n          initialBikeCount: { ...prevState.initialBikeCount,\n            [stationList[stationI]]: this.state.status[stationList[stationI]].bikes\n          }\n        }));\n      } //  this.getStationDayLog(stationList[stationI])\n      //  this.getStationWeekLog(stationList[stationI])       \n\n    }\n\n    this.setState({\n      stations: stationList\n    });\n    this.setState({\n      hasLoaded: true\n    });\n    console.log(\"updated station status\");\n  }\n\n  getStationDayLog(stationID) {\n    fetch(`stationlog/${stationID}`).then(res => res.json()).then(data => this.setStationDayLog(data, stationID)); // console.log(\"updated station \"+stationID+\" logs\")\n  }\n\n  setStationDayLog(data, stationID) {\n    this.setState(prevState => ({\n      dayLog: { ...prevState.dayLog,\n        [stationID]: data.stationLog\n      }\n    }));\n  }\n\n  getStationWeekLog(stationID) {\n    fetch(`stationlogweek/${stationID}`).then(res => res.json()).then(data => this.setStationWeekLog(data, stationID));\n  }\n\n  setStationWeekLog(data, stationID) {\n    this.setState(prevState => ({\n      weekLog: { ...prevState.weekLog,\n        [stationID]: data.stationLog\n      }\n    })); // console.log(this.state.weekLog[stationID])\n  }\n\n  async handleLocationChange(name) {\n    await this.setState({\n      selectedLocation: name,\n      numStations: 10,\n      stations: [],\n      initialBikeCount: {},\n      status: {},\n      showInfo: {},\n      dayLog: {},\n      weekLog: {},\n      hasLoaded: false,\n      mapStation: null,\n      loadTime: null,\n      updateTime: null,\n      timeSinceUpdate: null,\n      timeSinceLoad: null\n    });\n    this.getStationStatus();\n  }\n\n  handleMapToggle() {\n    this.setState(prevState => ({\n      showMap: !prevState.showMap\n    }));\n  }\n\n  async handleMapClick(event, id) {\n    await this.setState(prevState => {\n      return {\n        mapStation: id,\n        mapClickTime: Date.now(),\n        showInfo: { ...prevState.showInfo,\n          [id]: true\n        }\n      };\n    });\n    this.getStationDayLog(id);\n    this.getStationWeekLog(id); // console.log(this.state.mapStation)\n  }\n\n  async handleShowChange(id) {\n    await this.setState(prevState => {\n      const newShow = !prevState.showInfo[id];\n      return {\n        showInfo: { ...prevState.showInfo,\n          [id]: newShow\n        }\n      };\n    });\n    this.getStationDayLog(id);\n    this.getStationWeekLog(id);\n  }\n\n  async loadMoreStations() {\n    await this.setState(prevState => ({\n      numStations: prevState.numStations + 10\n    }));\n    this.getStationStatus();\n  }\n\n  updateWindowDimensions() {\n    this.setState(prevState => {\n      const nextShowMap = prevState.showMap || prevState.view !== \"Desktop\" && window.innerWidth > 820;\n      return {\n        windowWidth: window.innerWidth,\n        windowHeight: window.innerHeight,\n        view: window.innerWidth > 820 ? \"Desktop\" : \"Mobile\",\n        showMap: nextShowMap\n      };\n    });\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n    this.setState({\n      showMap: window.innerWidth > 820 ? true : false\n    });\n    this.getStationStatus();\n    setInterval(() => this.setState(prevState => ({\n      timeSinceUpdate: Date.now() - prevState.updateTime,\n      timeSinceLoad: Date.now() - prevState.loadTime\n    })), 100);\n    setInterval(() => this.setState(prevState => ({\n      timeSinceMapClick: Date.now() - prevState.mapClickTime\n    })), 10);\n    setInterval(() => this.getStationStatus(), 30000);\n  }\n\n  render() {\n    if (this.state.view === \"Desktop\") {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Header, Object.assign({}, this.state, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(Desktop, Object.assign({}, this.state, {\n        handleLocationChange: this.handleLocationChange,\n        handleMapClick: this.handleMapClick,\n        handleMapToggle: this.handleMapToggle,\n        handleShowChange: this.handleShowChange,\n        loadMoreStations: this.loadMoreStations,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(Footer, Object.assign({}, this.state, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 9\n        }\n      })));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Header, Object.assign({}, this.state, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: \"min(90vw,800px)\",\n          margin: \"auto\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Dashboard, Object.assign({}, this.state, {\n        handleLocationChange: this.handleLocationChange,\n        handleMapClick: this.handleMapClick,\n        handleMapToggle: this.handleMapToggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 9\n        }\n      })), /*#__PURE__*/React.createElement(Stations, Object.assign({}, this.state, {\n        handleShowChange: this.handleShowChange,\n        loadMoreStations: this.loadMoreStations,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 9\n        }\n      }))), /*#__PURE__*/React.createElement(Footer, Object.assign({}, this.state, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 9\n        }\n      })));\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/keny/Desktop/Programming/Bikeable/frontend/src/App.js"],"names":["React","Header","Dashboard","Stations","Footer","Desktop","App","Component","constructor","state","selectedLocation","selectedLocationLatitude","selectedLocationLongitude","locationCoordinates","latitude","longitude","numStations","time","date","weather","temperature","stations","initialBikeCount","status","showInfo","dayLog","weekLog","hasLoaded","showMap","mapStation","loadTime","updateTime","mapClickTime","timeSinceUpdate","timeSinceLoad","timeSinceMapClick","windowHeight","windowWidth","view","getStationStatus","bind","setStationStatus","getStationDayLog","setStationDayLog","getStationWeekLog","setStationWeekLog","handleLocationChange","handleMapToggle","handleMapClick","handleShowChange","loadMoreStations","updateWindowDimensions","fetch","then","res","json","data","stationList","stationStatus","map","station","id","setState","Date","now","weatherTemperature","weatherDescription","stationI","length","prevState","bikes","console","log","stationID","stationLog","name","event","newShow","nextShowMap","window","innerWidth","innerHeight","componentDidMount","addEventListener","setInterval","render","width","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport Header from \"./components/Header\"\nimport Dashboard from \"./components/Dashboard\"\nimport Stations from \"./components/Stations\"\nimport Footer from \"./components/Footer\"\n\n\nimport Desktop from \"./components/Desktop\"\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n\n      selectedLocation:\"Union Square Park\",\n      selectedLocationLatitude:40.7359,\n      selectedLocationLongitude:73.9911,\n      \n      locationCoordinates:{\n        \"Washington Square Park\":{latitude :40.7308,longitude:73.9973},\n        \"Union Square Park\":{latitude:40.7359, longitude:73.9911},\n        \"Times Square\":{latitude:40.7580,longitude:73.9911},\n        \"Bowling Green\":{latitude:40.7050, longitude:74.0137},\n        \"The MET\":{latitude:40.7794, longitude:73.9632},\n        \"Penn Station\":{latitude:40.7506,longitude:73.9935}\n      },\n      numStations:10,\n\n      time:\"\",\n      date:\"\",\n      weather:\"\",\n      temperature:\"\",\n\n      stations:[],\n      initialBikeCount:{},\n      status:{},\n      showInfo:{},\n      dayLog :{},\n      weekLog :{},\n      \n      hasLoaded:false,\n\n      showMap:false,\n      mapStation:null,\n      \n      loadTime: null,\n      updateTime :null,\n      mapClickTime:null,\n      timeSinceUpdate:null,\n      timeSinceLoad:null,\n      timeSinceMapClick:null,\n\n      windowHeight:0,\n      windowWidth:0,\n      view:null\n\n      \n    }\n    this.getStationStatus = this.getStationStatus.bind(this);\n    this.setStationStatus = this.setStationStatus.bind(this);\n\n    this.getStationDayLog = this.getStationDayLog.bind(this);\n    this.setStationDayLog = this.setStationDayLog.bind(this);\n\n    this.getStationWeekLog = this.getStationWeekLog.bind(this);\n    this.setStationWeekLog = this.setStationWeekLog.bind(this);\n\n    this.handleLocationChange = this.handleLocationChange.bind(this);\n    this.handleMapToggle = this.handleMapToggle.bind(this);\n    this.handleMapClick = this.handleMapClick.bind(this);\n    this.handleShowChange = this.handleShowChange.bind(this);\n    this.loadMoreStations = this.loadMoreStations.bind(this);\n\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  getStationStatus(){\n    fetch(`stationstatus/${this.state.numStations}/${this.state.selectedLocationLatitude},${this.state.selectedLocationLongitude}`).then(res=>res.json()).then(data=>(\n      this.setStationStatus(data)\n    ))\n    \n  }\n\n  setStationStatus(data){\n\n    let stationList = data.stationStatus.map(station=>{return station.id})\n    \n    if (!this.state.loadTime){\n      this.setState({ \n        loadTime:Date.now()\n       });\n\n     }\n\n     this.setState({\n      updateTime: Date.now(),\n      date:data.date,\n      time: data.time,\n      temperature:data.weatherTemperature,\n      weather: data.weatherDescription\n      \n    })\n         \n\n     for (let stationI = 0; stationI < stationList.length; stationI++){\n      this.setState(prevState=>({ \n        status:{\n          ...prevState.status,\n          [stationList[stationI]]:data.stationStatus[stationI]\n          \n        }\n       }));\n      \n       if (!(stationList[stationI] in this.state.initialBikeCount)){\n        this.setState(prevState=>({ \n          showInfo:{\n            ...prevState.showInfo,\n            [stationList[stationI]]:false\n          },\n          initialBikeCount:{\n            ...prevState.initialBikeCount,\n            [stationList[stationI]]:this.state.status[stationList[stationI]].bikes\n          },\n\n          }));\n      }\n      //  this.getStationDayLog(stationList[stationI])\n      //  this.getStationWeekLog(stationList[stationI])       \n     }\n     this.setState({\n      stations:stationList\n\n    })\n     \n     this.setState({ \n      hasLoaded:true\n     });\n     console.log(\"updated station status\")\n  }\n\n  getStationDayLog(stationID){\n    fetch(`stationlog/${stationID}`).then(res=>res.json()).then(data=>(\n      this.setStationDayLog(data,stationID)\n    ))\n    // console.log(\"updated station \"+stationID+\" logs\")\n  }\n\n  setStationDayLog(data,stationID){\n\n      this.setState(prevState=>({\n        dayLog:{\n          ...prevState.dayLog,\n          [stationID]:data.stationLog\n        }\n      }))\n    \n  }\n\n  getStationWeekLog(stationID){\n    fetch(`stationlogweek/${stationID}`).then(res=>res.json()).then(data=>(\n      this.setStationWeekLog(data,stationID)\n    ))\n  }\n\n  setStationWeekLog(data,stationID){\n\n      this.setState(prevState=>({\n        weekLog:{\n          ...prevState.weekLog,\n          [stationID]:data.stationLog\n        }\n      }))\n      // console.log(this.state.weekLog[stationID])\n    \n  }\n\n  async handleLocationChange(name){\n    await this.setState( {\n      selectedLocation: name,\n      numStations:10,\n\n      stations:[],\n      initialBikeCount:{},\n      status:{},\n      showInfo:{},\n      dayLog :{},\n      weekLog :{},\n      \n      hasLoaded:false,\n\n      mapStation:null,\n      \n      loadTime: null,\n      updateTime :null,\n      timeSinceUpdate:null,\n      timeSinceLoad:null\n    })\n    this.getStationStatus()\n  }\n\n  handleMapToggle(){\n    this.setState( prevState =>(\n      {showMap:!prevState.showMap}\n     ))\n  }\n\n  async handleMapClick(event,id){\n    await this.setState( prevState=>{\n      return {\n        mapStation:id,\n        mapClickTime:Date.now(),\n        showInfo:{\n          ...prevState.showInfo,\n          [id]:true\n        } \n      }\n\n    })\n    this.getStationDayLog(id)\n    this.getStationWeekLog(id) \n    \n    // console.log(this.state.mapStation)\n  }\n\n  async handleShowChange(id){\n    await this.setState( prevState =>{\n      const newShow = !prevState.showInfo[id]\n      return { \n      showInfo:{\n        ...prevState.showInfo,\n        [id]:newShow\n      }\n     }})\n    this.getStationDayLog(id)\n    this.getStationWeekLog(id)   \n  }\n\n  async loadMoreStations(){\n    await this.setState(prevState=>({\n      numStations: prevState.numStations+10\n    }))\n    this.getStationStatus()\n  }\n\n  updateWindowDimensions() {\n    this.setState(prevState=>{\n      const nextShowMap = prevState.showMap || (prevState.view!==\"Desktop\"&&window.innerWidth>820);\n      return {\n        windowWidth: window.innerWidth, \n      windowHeight: window.innerHeight,\n      view:window.innerWidth>820?\"Desktop\":\"Mobile\",\n      showMap:nextShowMap\n    }});\n    \n      \n     \n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n    this.setState({showMap:window.innerWidth>820?true:false})\n    this.getStationStatus()\n    setInterval(() => this.setState(prevState=>({ timeSinceUpdate: Date.now()-prevState.updateTime,timeSinceLoad:Date.now()-prevState.loadTime})), 100)\n    setInterval(() => this.setState(prevState=>({timeSinceMapClick:Date.now()-prevState.mapClickTime})), 10)\n    setInterval(() => this.getStationStatus(), 30000)\n    \n      \n  }\n\n  render(){\n    if (this.state.view===\"Desktop\"){return (\n      <div>\n        <Header {...this.state}/>\n        <Desktop {...this.state} handleLocationChange = {this.handleLocationChange} handleMapClick = {this.handleMapClick} handleMapToggle = {this.handleMapToggle} handleShowChange = {this.handleShowChange} loadMoreStations = {this.loadMoreStations}/>\n        <Footer {...this.state}/>\n        \n      </div>\n    );}\n    else{return(\n      <div>\n        <Header {...this.state}/>\n        <div style={{width:\"min(90vw,800px)\",margin:\"auto\"}}>\n        <Dashboard{...this.state} handleLocationChange = {this.handleLocationChange} handleMapClick = {this.handleMapClick} handleMapToggle = {this.handleMapToggle}/>\n        <Stations{...this.state} handleShowChange = {this.handleShowChange} loadMoreStations = {this.loadMoreStations}/>\n        </div>\n        <Footer {...this.state}/>\n      </div>\n    )\n      \n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}