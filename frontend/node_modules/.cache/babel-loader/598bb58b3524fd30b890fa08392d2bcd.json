{"ast":null,"code":"var _jsxFileName = \"/Users/keny/Desktop/Programming/Bikeable/frontend/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport StationCard from \"./components/StationCard\";\nimport Footer from \"./components/Footer\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      warnings: null,\n      latitude: 40.7308,\n      longitude: 73.9973,\n      stations: [],\n      initialBikeCount: {},\n      logBikeCount: {},\n      status: {},\n      log: {},\n      hasloaded: false,\n      loadTime: null,\n      updateTime: null,\n      timeSinceUpdate: null,\n      timeSinceLoad: null,\n      showInfo: {}\n    };\n    this.getStationStatus = this.getStationStatus.bind(this);\n    this.setStationStatus = this.setStationStatus.bind(this);\n    this.handleShowChange = this.handleShowChange.bind(this);\n    this.getStationLog = this.getStationLog.bind(this);\n    this.setStationLog = this.setStationLog.bind(this);\n  }\n\n  getStationStatus() {\n    fetch(`stationstatus/${this.state.latitude},${this.state.longitude}`).then(res => res.json()).then(data => this.setStationStatus(data));\n  }\n\n  setStationStatus(data) {\n    let stationList = data.stationStatus.map(station => {\n      return station.id;\n    });\n\n    if (!this.state.loadTime) {\n      this.setState({\n        loadTime: Date.now()\n      });\n    }\n\n    this.setState({\n      updateTime: Date.now()\n    });\n\n    for (let stationI = 0; stationI < stationList.length; stationI++) {\n      this.setState(prevState => ({\n        status: { ...prevState.status,\n          [stationList[stationI]]: data.stationStatus[stationI]\n        }\n      }));\n\n      if (stationList[stationI] in this.state.initialBikeCount) {\n        const prevStationState = this.state.logBikeCount[stationList[stationI]].concat([this.state.status[stationList[stationI]].bikes]);\n        this.setState(prevState => ({\n          logBikeCount: { ...prevState.logBikeCount,\n            [stationList[stationI]]: prevStationState\n          }\n        }));\n      } else {\n        this.setState(prevState => ({\n          showInfo: { ...prevState.showInfo,\n            [stationList[stationI]]: false\n          },\n          initialBikeCount: { ...prevState.initialBikeCount,\n            [stationList[stationI]]: this.state.status[stationList[stationI]].bikes\n          },\n          logBikeCount: { ...prevState.logBikeCount,\n            [stationList[stationI]]: [this.state.status[stationList[stationI]].bikes]\n          }\n        }));\n      }\n\n      this.getStationLog(stationList[stationI]);\n    }\n\n    this.setState({\n      stations: stationList\n    });\n    this.setState({\n      hasloaded: true\n    });\n    console.log(\"updated station status\");\n  }\n\n  getStationLog(stationID) {\n    fetch(`stationlog/${stationID}`).then(res => res.json()).then(data => this.setStationLog(data, stationID)); // console.log(\"updated station \"+stationID+\" logs\")\n  }\n\n  setStationLog(data, stationID) {\n    this.setState(prevState => ({\n      log: { ...prevState.log,\n        [stationID]: data.stationLog\n      }\n    }));\n  }\n\n  handleShowChange(id) {\n    this.setState(prevState => {\n      const newShow = !prevState.showInfo[id];\n      return {\n        showInfo: { ...prevState.showInfo,\n          [id]: newShow\n        }\n      };\n    });\n  }\n\n  componentDidMount() {\n    this.getStationStatus();\n    setInterval(() => this.setState(prevState => ({\n      timeSinceUpdate: Date.now() - prevState.updateTime,\n      timeSinceLoad: Date.now() - prevState.loadTime\n    })), 100);\n    setInterval(() => this.getStationStatus(), 30000);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }), !this.state.hasloaded && /*#__PURE__*/React.createElement(\"h2\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 33\n      }\n    }, \"Loading...\"), this.state.stations.map(id => /*#__PURE__*/React.createElement(StationCard, Object.assign({\n      key: id,\n      id: id\n    }, this.state, {\n      handleShowChange: this.handleShowChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }))), this.state.hasloaded && /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 32\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/keny/Desktop/Programming/Bikeable/frontend/src/App.js"],"names":["React","Header","StationCard","Footer","App","Component","constructor","state","warnings","latitude","longitude","stations","initialBikeCount","logBikeCount","status","log","hasloaded","loadTime","updateTime","timeSinceUpdate","timeSinceLoad","showInfo","getStationStatus","bind","setStationStatus","handleShowChange","getStationLog","setStationLog","fetch","then","res","json","data","stationList","stationStatus","map","station","id","setState","Date","now","stationI","length","prevState","prevStationState","concat","bikes","console","stationID","stationLog","newShow","componentDidMount","setInterval","render","textAlign"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport Header from \"./components/Header\"\nimport StationCard from \"./components/StationCard\"\nimport Footer from \"./components/Footer\"\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      warnings:null,\n      latitude :40.7308,\n      longitude:73.9973,\n\n      stations:[],\n      initialBikeCount:{},\n      logBikeCount:{},\n      status:{},\n      log :{},\n      \n      hasloaded:false,\n\n      loadTime: null,\n      updateTime :null,\n      timeSinceUpdate:null,\n      timeSinceLoad:null,\n      \n      showInfo:{}\n    }\n    this.getStationStatus = this.getStationStatus.bind(this);\n    this.setStationStatus = this.setStationStatus.bind(this);\n    this.handleShowChange = this.handleShowChange.bind(this);\n    this.getStationLog = this.getStationLog.bind(this);\n    this.setStationLog = this.setStationLog.bind(this);\n\n    \n  }\n\n  getStationStatus(){\n    fetch(`stationstatus/${this.state.latitude},${this.state.longitude}`).then(res=>res.json()).then(data=>(\n      this.setStationStatus(data)\n    ))\n  }\n  setStationStatus(data){\n\n    let stationList = data.stationStatus.map(station=>{return station.id})\n    \n    if (!this.state.loadTime){\n      this.setState({ \n        loadTime:Date.now()\n       });\n\n     }\n\n     this.setState({\n      updateTime: Date.now()\n    })\n         \n\n     for (let stationI = 0; stationI < stationList.length; stationI++){\n      this.setState(prevState=>({ \n        status:{\n          ...prevState.status,\n          [stationList[stationI]]:data.stationStatus[stationI]\n        }\n       }));\n      \n       if (stationList[stationI] in this.state.initialBikeCount){\n         const prevStationState = this.state.logBikeCount[stationList[stationI]].concat([this.state.status[stationList[stationI]].bikes])\n        this.setState(prevState=>({ \n          logBikeCount:{\n            ...prevState.logBikeCount,\n            [stationList[stationI]]:prevStationState\n          }\n         }));\n       }else{\n        this.setState(prevState=>({ \n          showInfo:{\n            ...prevState.showInfo,\n            [stationList[stationI]]:false\n          },\n          initialBikeCount:{\n            ...prevState.initialBikeCount,\n            [stationList[stationI]]:this.state.status[stationList[stationI]].bikes\n          },\n          logBikeCount:{\n            ...prevState.logBikeCount,\n            [stationList[stationI]]:[this.state.status[stationList[stationI]].bikes]\n          }\n         }));\n         \n       }\n       this.getStationLog(stationList[stationI])\n       \n     }\n     this.setState({\n      stations:stationList\n\n    })\n     \n     this.setState({ \n      hasloaded:true\n     });\n     console.log(\"updated station status\")\n  }\n\n  getStationLog(stationID){\n    fetch(`stationlog/${stationID}`).then(res=>res.json()).then(data=>(\n      this.setStationLog(data,stationID)\n    ))\n    // console.log(\"updated station \"+stationID+\" logs\")\n  }\n\n  setStationLog(data,stationID){\n\n\n      this.setState(prevState=>({\n        log:{\n          ...prevState.log,\n          [stationID]:data.stationLog\n        }\n      }))\n    \n  }\n\n  handleShowChange(id){\n    this.setState( prevState =>{\n      const newShow = !prevState.showInfo[id]\n      return { \n      showInfo:{\n        ...prevState.showInfo,\n        [id]:newShow\n      }\n     }})\n  }\n\n  componentDidMount() {\n    this.getStationStatus()\n    setInterval(() => this.setState(prevState=>({ timeSinceUpdate: Date.now()-prevState.updateTime,timeSinceLoad:Date.now()-prevState.loadTime})), 100)\n    setInterval(() => this.getStationStatus(), 30000)\n      \n  }\n\n\n\n  render(){\n\n    return (\n    \n      <div>\n        <Header/>\n        {!this.state.hasloaded&&<h2 style={{textAlign: \"center\"}}>Loading...</h2>}\n\n        {this.state.stations.map( id =>(\n          <StationCard\n          key={id}\n          id = {id}\n          {...this.state}\n\n          handleShowChange = {this.handleShowChange}\n          />\n        ) )}\n        {this.state.hasloaded&&<Footer/>}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}